--  CREATE A DATABASE level1;
CREATE DATABASE level1

USE level1;

-- HOW TO CREATE TABLE [DEFAULT VALUE, AUTO_INCREMENT, PRIMARY KEY, VARCHAR, NOT NULL, INT, IF NOT EXISTS ]
CREATE TABLE IF NOT EXISTS L1(
 ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT, 
 FNAME VARCHAR(40) NOT NULL, 
 LNAME VARCHAR(40) NOT NULL,
 DEPERTEMENT VARCHAR(30) NOT NULL,
 COUNTY VARCHAR(10) NOT NULL DEFAULT 'MUMBAI'
 
);
-- DATA INSERT INTO TABLE 

INSERT INTO L1 (FNAME, LNAME, DEPERTEMENT, SALARY)
VALUES('SOURAB', 'RAWAT', 'IT'), ('RAHUL', 'ROY', 'FINANCE'), ('RAHUL', 'DAS', 'CASH'), ('ROHAN', 'ROY', 'FINANCE'),
('SENDEEP', 'KUMAR', 'IT'), ('AYUSH', '', 'LOGISTIC'), ('PREEM', 'KUMAR', 'SALAESMAN'), ('ROSHAN', 'KUMAR', 'SALAESMAN'),
('YASH', 'KUMAR', 'SALAESMAN'), ('PREEM', 'SINGH', 'SALAESMAN'), ('PURVI', 'KUMAR', 'SALAESMAN'), ('ABAHAY', 'KUMAR', 'SALAESMAN');

-- READ DATA 
SELECT * FROM L1;

-- MODIFIY DATA 

UPDATE L1
SET FNAME='PRIYANSH'
WHERE ID=3;
SELECT * FROM L1;

-- DELETE DATA FROM TABLE 
DELETE  FROM L1 WHERE ID=12;
SELECT * FROM L1;

--  WHERE FUNCTION
SELECT * FROM L1 WHERE ID=8;

/* DROP DATABASE OR TABLE
 DROP DATABASE <NAME>
 DROP TABLE <NAME> */
 
SELECT FNAME, LNAME, SALARY FROM L1
WHERE SALARY >= 20000;
 
 -- CHECKING YOUR TABLE 
DESC L1;

-- CONCAT FUNCTION 
SELECT ID, CONCAT(FNAME,' ', LNAME) FROM L1 ;
SELECT * FROM L1;

SELECT ID, CONCAT_WS('" : "', ID, FNAME, LNAME, DEPERTEMENT, COUNTY) FROM L1;

-- REPLACE 

SELECT REPLACE(FNAME, 'SOURAB', 'MANDEEP') FROM L1;

-- UPPER AND LOWER

SELECT ID, LOWER(FNAME) FROM L1;

-- CHAR LENGTH

SELECT ID, CHAR_LENGTH(FNAME) FROM L1;

/* [INSERT, LEFT, RIGTH, TRIM, REPEAT] */

SELECT ID, INSERT(FNAME, 0, 1,  'P') FROM L1;

-- AAD COLUMN OR ROW IN TABLE

ALTER TABLE L1
ADD COLUMN 
PAYMENT INT NOT NULL
DEFAULT 700000;

select*FROM L1;

UPDATE L1
SET PAYMENT = CASE 
    WHEN ID = 1 THEN 20000
    WHEN ID = 6 THEN 69000
    WHEN ID = 4 THEN 78000
    WHEN ID = 2 THEN 40000
    WHEN ID = 3 THEN 89000
    WHEN ID = 7 THEN 68000
    WHEN ID = 8 THEN 140000
    WHEN ID = 9 THEN 85000
END
WHERE ID IN (1, 6, 4, 2, 3,7,8,9);
select*FROM L1;

-- LIKE
SELECT * FROM L1 WHERE DEPERTEMENT LIKE  '%SALAES%';

-- LIMIT 
SELECT * FROM L1 LIMIT 3;

-- GROUP BY \ COUNT 
SELECT DEPERTEMENT FROM L1 GROUP BY DEPERTEMENT;

SELECT COUNT(FNAME) FROM L1;

SELECT DEPERTEMENT, COUNT(ID) FROM L1 GROUP BY DEPERTEMENT; 

-- MAX AND MIN 
SELECT MAX(PAYMENT) FROM L1;

SELECT MIN(PAYMENT) FROM L1;

-- MAX AND MIN IN GROUP BY FUNCTION

SELECT DEPERTEMENT, MAX(PAYMENT) FROM L1 GROUP BY DEPERTEMENT;

SELECT DEPERTEMENT, MIN(PAYMENT) FROM L1 GROUP BY DEPERTEMENT;

SELECT ID, FNAME, LNAME, DEPERTEMENT FROM L1
WHERE PAYMENT = (SELECT MAX(PAYMENT) FROM L1);

-- REVERSE 
SELECT REVERSE(FNAME) FROM L1;

-- OTHER FUNCTION

-- SUM AVERAGE 

SELECT SUM(PAYMENT) FROM L1;
SELECT AVG(PAYMENT) FROM L1;

-- DATATYPE DECIEMAL
CREATE TABLE PRICE1 (
 N0 INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
 NAME CHAR(50) NOT NULL,
 PRICE DECIMAL(5,2) NOT NULL
);
/* HERE WE ALSO USE FLOAT AND DOUBLE 
FLOAT = UPTO 7 DIGITS, TAKE 4 BYTE OF MEMORY 
DOUBLE = UPTO 15 DIGITS, TAKE 8 BYTE OF MEMORY 
*/

INSERT INTO PRICE1(NAME, PRICE)
VALUE('OIL', 130.65),('BISKOT', 562.11),('BREAD', 19.58),('KURKURE', 19.57),('BAT', 705.78);

SELECT * FROM PRICE1;

-- realatiomal OPERATION

SELECT * FROM PRICE1 WHERE PRICE > 50;

SELECT * FROM PRICE1 WHERE PRICE < 50;

SELECT * FROM PRICE1 WHERE PRICE = 705.8;

SELECT * FROM PRICE1 WHERE PRICE >= 50;

-- DATE TIME  DATETIME

CREATE TABLE  DATE_TIME(
JD DATE,
JT TIME,
JDT DATETIME
);

INSERT INTO DATE_TIME(JD, JT, JDT)
VALUES(CURDATE(),CURTIME(),NOW()), ('2024-09-04', '8:30:39', '2007-01-19 17:45:29');
-- HERE WE USE CURDATE CURTIME AND NOW TO CHECK CURRENT TIME AND DATE
SELECT * FROM DATE_TIME;

-- DAYNAME DAYOFMONTHS DAYOFWEEK

SELECT DAYNAME('2067-05-17');
-- > TUESHDAY
SELECT DAYOFMONTH('2067-05-17');
-- > 17
SELECT DAYOFWEEK('2067-05-17');
-- > 3
SELECT MONTHNAME('2067-05-17');
-- > MAY
SELECT HOUR('17:30:56');
-- > 17

-- DATE AND TIME MATHS
SELECT DATE_ADD('2009-09-8', INTERVAL 7 DAY );
-- > 2009-09-15
SELECT DATE_SUB('2009-09-8', INTERVAL  2 YEAR); 
-- > 2007-09-08
SELECT MONTHNAME(DATE_ADD('2009-09-8', INTERVAL 7 MONTH ));
-- > APRIL

SELECT TIMEDIFF(CURTIME(), '12:56:4');
-- > 01:44:53

-- DEFAULT ON UODATE TIME

CREATE TABLE BLOG(
TEXT VARCHAR(100),
C_TIME DATETIME DEFAULT CURRENT_TIMESTAMP,
U_TIME DATETIME ON UPDATE CURRENT_TIMESTAMP
);

INSERT INTO BLOG(TEXT)
VALUES("Anyone can build wealth, but your beliefs about money can affect how much wealth you'll build.");

SELECT * FROM BLOG;

UPDATE BLOG
SET TEXT= "DON'T SOTP WHEN YOU TIRED " ; 

SELECT * FROM BLOG;


-- LOGICAL OPERATION

SELECT * FROM L1;

SELECT * FROM L1 WHERE PAYMENT >= 30000 AND PAYMENT <= 100000 ;

SELECT * FROM L1 WHERE PAYMENT BETWEEN  30000 AND 100000 ;

 
SELECT * FROM L1 WHERE DEPERTEMENT='FINANCE' AND PAYMENT >=25000;

SELECT * FROM L1 WHERE DEPERTEMENT='FINANCE' OR PAYMENT < 25000;
-- > BOTH CODE ARE SAME [FIRST 2]
SELECT * FROM L1 WHERE DEPERTEMENT='IT' OR DEPERTEMENT='FINANCE';

SELECT * FROM L1 WHERE DEPERTEMEMT IN('IT', 'FINANCE');

-- ]CASE FUNCTION [

 SELECT CONCAT(FNAME, ' ', LNAME) AS FULLNAME, PAYMENT,
 CASE
 WHEN PAYMENT >= 60000 THEN 'GOOD SALARY'
 ELSE 'NOT GOOD SALARY'
 END AS 'SALARY CATAGEORY'
 FROM L1;USE level1;

-- HOW TO CREATE TABLE [DEFAULT VALUE, AUTO_INCREMENT, PRIMARY KEY, VARCHAR, NOT NULL, INT, IF NOT EXISTS ]
CREATE TABLE IF NOT EXISTS L1(
 ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT, 
 FNAME VARCHAR(40) NOT NULL, 
 LNAME VARCHAR(40) NOT NULL,
 DEPERTEMENT VARCHAR(30) NOT NULL,
 COUNTY VARCHAR(10) NOT NULL DEFAULT 'MUMBAI'
 
);
-- DATA INSERT INTO TABLE 

INSERT INTO L1 (FNAME, LNAME, DEPERTEMENT, SALARY)
VALUES('SOURAB', 'RAWAT', 'IT'), ('RAHUL', 'ROY', 'FINANCE'), ('RAHUL', 'DAS', 'CASH'), ('ROHAN', 'ROY', 'FINANCE'),
('SENDEEP', 'KUMAR', 'IT'), ('AYUSH', '', 'LOGISTIC'), ('PREEM', 'KUMAR', 'SALAESMAN'), ('ROSHAN', 'KUMAR', 'SALAESMAN'),
('YASH', 'KUMAR', 'SALAESMAN'), ('PREEM', 'SINGH', 'SALAESMAN'), ('PURVI', 'KUMAR', 'SALAESMAN'), ('ABAHAY', 'KUMAR', 'SALAESMAN');

-- READ DATA 
SELECT * FROM L1;

-- MODIFIY DATA 

UPDATE L1
SET FNAME='PRIYANSH'
WHERE ID=3;
SELECT * FROM L1;

-- DELETE DATA FROM TABLE 
DELETE  FROM L1 WHERE ID=12;
SELECT * FROM L1;

--  WHERE FUNCTION
SELECT * FROM L1 WHERE ID=8;

/* DROP DATABASE OR TABLE
 DROP DATABASE <NAME>
 DROP TABLE <NAME> */
 
 -- CHECKING YOUR TABLE 
DESC L1;

-- CONCAT FUNCTION 
SELECT ID, CONCAT(FNAME,' ', LNAME) FROM L1 ;
SELECT * FROM L1;

SELECT ID, CONCAT_WS('" : "', ID, FNAME, LNAME, DEPERTEMENT, COUNTY) FROM L1;

-- REPLACE 

SELECT REPLACE(FNAME, 'SOURAB', 'MANDEEP') FROM L1;

-- UPPER AND LOWER

SELECT ID, LOWER(FNAME) FROM L1;

-- CHAR LENGTH

SELECT ID, CHAR_LENGTH(FNAME) FROM L1;

/* [INSERT, LEFT, RIGTH, TRIM, REPEAT] */

SELECT ID, INSERT(FNAME, 0, 1,  'P') FROM L1;

-- AAD COLUMN OR ROW IN TABLE

ALTER TABLE L1
ADD COLUMN 
PAYMENT INT NOT NULL
DEFAULT 700000;

select*FROM L1;

UPDATE L1
SET PAYMENT = CASE 
    WHEN ID = 1 THEN 20000
    WHEN ID = 6 THEN 69000
    WHEN ID = 4 THEN 78000
    WHEN ID = 2 THEN 40000
    WHEN ID = 3 THEN 89000
    WHEN ID = 7 THEN 68000
    WHEN ID = 8 THEN 140000
    WHEN ID = 9 THEN 85000
END
WHERE ID IN (1, 6, 4, 2, 3,7,8,9);
select*FROM L1;

-- LIKE
SELECT * FROM L1 WHERE DEPERTEMENT LIKE  '%SALAES%';

-- LIMIT 
SELECT * FROM L1 LIMIT 3;

-- GROUP BY \ COUNT 
SELECT DEPERTEMENT FROM L1 GROUP BY DEPERTEMENT;

SELECT COUNT(FNAME) FROM L1;

SELECT DEPERTEMENT, COUNT(ID) FROM L1 GROUP BY DEPERTEMENT; 

-- MAX AND MIN 
SELECT MAX(PAYMENT) FROM L1;

SELECT MIN(PAYMENT) FROM L1;

-- MAX AND MIN IN GROUP BY FUNCTION

SELECT DEPERTEMENT, MAX(PAYMENT) FROM L1 GROUP BY DEPERTEMENT;

SELECT DEPERTEMENT, MIN(PAYMENT) FROM L1 GROUP BY DEPERTEMENT;

SELECT ID, FNAME, LNAME, DEPERTEMENT FROM L1
WHERE PAYMENT = (SELECT MAX(PAYMENT) FROM L1);

-- REVERSE 
SELECT REVERSE(FNAME) FROM L1;

-- OTHER FUNCTION

-- SUM AVERAGE 

SELECT SUM(PAYMENT) FROM L1;
SELECT AVG(PAYMENT) FROM L1;

-- DATATYPE DECIEMAL
CREATE TABLE PRICE1 (
 N0 INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
 NAME CHAR(50) NOT NULL,
 PRICE DECIMAL(5,2) NOT NULL
);
/* HERE WE ALSO USE FLOAT AND DOUBLE 
FLOAT = UPTO 7 DIGITS, TAKE 4 BYTE OF MEMORY 
DOUBLE = UPTO 15 DIGITS, TAKE 8 BYTE OF MEMORY 
*/

INSERT INTO PRICE1(NAME, PRICE)
VALUE('OIL', 130.65),('BISKOT', 562.11),('BREAD', 19.58),('KURKURE', 19.57),('BAT', 705.78);

SELECT * FROM PRICE1;

-- realatiomal OPERATION

SELECT * FROM PRICE1 WHERE PRICE > 50;

SELECT * FROM PRICE1 WHERE PRICE < 50;

SELECT * FROM PRICE1 WHERE PRICE = 705.8;

SELECT * FROM PRICE1 WHERE PRICE >= 50;

-- DATE TIME  DATETIME

CREATE TABLE  DATE_TIME(
JD DATE,
JT TIME,
JDT DATETIME
);

INSERT INTO DATE_TIME(JD, JT, JDT)
VALUES(CURDATE(),CURTIME(),NOW()), ('2024-09-04', '8:30:39', '2007-01-19 17:45:29');
-- HERE WE USE CURDATE CURTIME AND NOW TO CHECK CURRENT TIME AND DATE
SELECT * FROM DATE_TIME;

-- DAYNAME DAYOFMONTHS DAYOFWEEK

SELECT DAYNAME('2067-05-17');
-- > TUESHDAY
SELECT DAYOFMONTH('2067-05-17');
-- > 17
SELECT DAYOFWEEK('2067-05-17');
-- > 3
SELECT MONTHNAME('2067-05-17');
-- > MAY
SELECT HOUR('17:30:56');
-- > 17

-- DATE AND TIME MATHS
SELECT DATE_ADD('2009-09-8', INTERVAL 7 DAY );
-- > 2009-09-15
SELECT DATE_SUB('2009-09-8', INTERVAL  2 YEAR); 
-- > 2007-09-08
SELECT MONTHNAME(DATE_ADD('2009-09-8', INTERVAL 7 MONTH ));
-- > APRIL

SELECT TIMEDIFF(CURTIME(), '12:56:4');
-- > 01:44:53

-- DEFAULT ON UODATE TIME

CREATE TABLE BLOG(
TEXT VARCHAR(100),
C_TIME DATETIME DEFAULT CURRENT_TIMESTAMP,
U_TIME DATETIME ON UPDATE CURRENT_TIMESTAMP
);

INSERT INTO BLOG(TEXT)
VALUES("Anyone can build wealth, but your beliefs about money can affect how much wealth you'll build.");

SELECT * FROM BLOG;

UPDATE BLOG
SET TEXT= "DON'T SOTP WHEN YOU TIRED " ; 

SELECT * FROM BLOG;


-- LOGICAL OPERATION

SELECT * FROM L1;

SELECT * FROM L1 WHERE PAYMENT >= 30000 AND PAYMENT <= 100000 ;

SELECT * FROM L1 WHERE PAYMENT BETWEEN  30000 AND 100000 ;

 
SELECT * FROM L1 WHERE DEPERTEMENT='FINANCE' AND PAYMENT >=25000;

SELECT * FROM L1 WHERE DEPERTEMENT='FINANCE' OR PAYMENT < 25000;
-- > BOTH CODE ARE SAME [FIRST 2]
SELECT * FROM L1 WHERE DEPERTEMENT='IT' OR DEPERTEMENT='FINANCE';

SELECT * FROM L1 WHERE DEPERTEMEMT IN('IT', 'FINANCE');

-- ]CASE FUNCTION [

 SELECT CONCAT(FNAME, ' ', LNAME) AS FULLNAME, PAYMENT,
 CASE
 WHEN PAYMENT >= 60000 THEN 'GOOD SALARY'
 ELSE 'NOT GOOD SALARY'
 END AS 'SALARY CATAGEORY'
 FROM L1;
-- HOW TO CREATE TABLE [DEFAULT VALUE, AUTO_INCREMENT, PRIMARY KEY, VARCHAR, NOT NULL, INT, IF NOT EXISTS ]
CREATE TABLE IF NOT EXISTS L1(
 ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT, 
 FNAME VARCHAR(40) NOT NULL, 
 LNAME VARCHAR(40) NOT NULL,
 DEPERTEMENT VARCHAR(30) NOT NULL,
 COUNTY VARCHAR(10) NOT NULL DEFAULT 'MUMBAI'
 
);
-- DATA INSERT INTO TABLE 

INSERT INTO L1 (FNAME, LNAME, DEPERTEMENT, SALARY)
VALUES('SOURAB', 'RAWAT', 'IT'), ('RAHUL', 'ROY', 'FINANCE'), ('RAHUL', 'DAS', 'CASH'), ('ROHAN', 'ROY', 'FINANCE'),
('SENDEEP', 'KUMAR', 'IT'), ('AYUSH', '', 'LOGISTIC'), ('PREEM', 'KUMAR', 'SALAESMAN'), ('ROSHAN', 'KUMAR', 'SALAESMAN'),
('YASH', 'KUMAR', 'SALAESMAN'), ('PREEM', 'SINGH', 'SALAESMAN'), ('PURVI', 'KUMAR', 'SALAESMAN'), ('ABAHAY', 'KUMAR', 'SALAESMAN');

-- READ DATA 
SELECT * FROM L1;

-- MODIFIY DATA 

UPDATE L1
SET FNAME='PRIYANSH'
WHERE ID=3;
SELECT * FROM L1;

-- DELETE DATA FROM TABLE 
DELETE  FROM L1 WHERE ID=12;
SELECT * FROM L1;

--  WHERE FUNCTION
SELECT * FROM L1 WHERE ID=8;

/* DROP DATABASE OR TABLE
 DROP DATABASE <NAME>
 DROP TABLE <NAME> */
 
 -- CHECKING YOUR TABLE 
DESC L1;

-- CONCAT FUNCTION 
SELECT ID, CONCAT(FNAME,' ', LNAME) FROM L1 ;
SELECT * FROM L1;

SELECT ID, CONCAT_WS('" : "', ID, FNAME, LNAME, DEPERTEMENT, COUNTY) FROM L1;

-- REPLACE 

SELECT REPLACE(FNAME, 'SOURAB', 'MANDEEP') FROM L1;

-- UPPER AND LOWER

SELECT ID, LOWER(FNAME) FROM L1;

-- CHAR LENGTH

SELECT ID, CHAR_LENGTH(FNAME) FROM L1;

/* [INSERT, LEFT, RIGTH, TRIM, REPEAT] */

SELECT ID, INSERT(FNAME, 0, 1,  'P') FROM L1;

-- AAD COLUMN OR ROW IN TABLE

ALTER TABLE L1
ADD COLUMN 
PAYMENT INT NOT NULL
DEFAULT 700000;

select*FROM L1;

UPDATE L1
SET PAYMENT = CASE 
    WHEN ID = 1 THEN 20000
    WHEN ID = 6 THEN 69000
    WHEN ID = 4 THEN 78000
    WHEN ID = 2 THEN 40000
    WHEN ID = 3 THEN 89000
    WHEN ID = 7 THEN 68000
    WHEN ID = 8 THEN 140000
    WHEN ID = 9 THEN 85000
END
WHERE ID IN (1, 6, 4, 2, 3,7,8,9);
select*FROM L1;

-- LIKE
SELECT * FROM L1 WHERE DEPERTEMENT LIKE  '%SALAES%';

-- LIMIT 
SELECT * FROM L1 LIMIT 3;

-- GROUP BY \ COUNT 
SELECT DEPERTEMENT FROM L1 GROUP BY DEPERTEMENT;

SELECT COUNT(FNAME) FROM L1;

SELECT DEPERTEMENT, COUNT(ID) FROM L1 GROUP BY DEPERTEMENT; 

-- MAX AND MIN 
SELECT MAX(PAYMENT) FROM L1;

SELECT MIN(PAYMENT) FROM L1;

-- MAX AND MIN IN GROUP BY FUNCTION

SELECT DEPERTEMENT, MAX(PAYMENT) FROM L1 GROUP BY DEPERTEMENT;

SELECT DEPERTEMENT, MIN(PAYMENT) FROM L1 GROUP BY DEPERTEMENT;

SELECT ID, FNAME, LNAME, DEPERTEMENT FROM L1
WHERE PAYMENT = (SELECT MAX(PAYMENT) FROM L1);

-- REVERSE 
SELECT REVERSE(FNAME) FROM L1;

-- OTHER FUNCTION

-- SUM AVERAGE 

SELECT SUM(PAYMENT) FROM L1;
SELECT AVG(PAYMENT) FROM L1;

-- DATATYPE DECIEMAL
CREATE TABLE PRICE1 (
 N0 INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
 NAME CHAR(50) NOT NULL,
 PRICE DECIMAL(5,2) NOT NULL
);
/* HERE WE ALSO USE FLOAT AND DOUBLE 
FLOAT = UPTO 7 DIGITS, TAKE 4 BYTE OF MEMORY 
DOUBLE = UPTO 15 DIGITS, TAKE 8 BYTE OF MEMORY 
*/

INSERT INTO PRICE1(NAME, PRICE)
VALUE('OIL', 130.65),('BISKOT', 562.11),('BREAD', 19.58),('KURKURE', 19.57),('BAT', 705.78);

SELECT * FROM PRICE1;

-- realatiomal OPERATION

SELECT * FROM PRICE1 WHERE PRICE > 50;

SELECT * FROM PRICE1 WHERE PRICE < 50;

SELECT * FROM PRICE1 WHERE PRICE = 705.8;

SELECT * FROM PRICE1 WHERE PRICE >= 50;

-- DATE TIME  DATETIME

CREATE TABLE  DATE_TIME(
JD DATE,
JT TIME,
JDT DATETIME
);

INSERT INTO DATE_TIME(JD, JT, JDT)
VALUES(CURDATE(),CURTIME(),NOW()), ('2024-09-04', '8:30:39', '2007-01-19 17:45:29');
-- HERE WE USE CURDATE CURTIME AND NOW TO CHECK CURRENT TIME AND DATE
SELECT * FROM DATE_TIME;

-- DAYNAME DAYOFMONTHS DAYOFWEEK

SELECT DAYNAME('2067-05-17');
-- > TUESHDAY
SELECT DAYOFMONTH('2067-05-17');
-- > 17
SELECT DAYOFWEEK('2067-05-17');
-- > 3
SELECT MONTHNAME('2067-05-17');
-- > MAY
SELECT HOUR('17:30:56');
-- > 17

-- DATE AND TIME MATHS
SELECT DATE_ADD('2009-09-8', INTERVAL 7 DAY );
-- > 2009-09-15
SELECT DATE_SUB('2009-09-8', INTERVAL  2 YEAR); 
-- > 2007-09-08
SELECT MONTHNAME(DATE_ADD('2009-09-8', INTERVAL 7 MONTH ));
-- > APRIL

SELECT TIMEDIFF(CURTIME(), '12:56:4');
-- > 01:44:53

-- DEFAULT ON UODATE TIME

CREATE TABLE BLOG(
TEXT VARCHAR(100),
C_TIME DATETIME DEFAULT CURRENT_TIMESTAMP,
U_TIME DATETIME ON UPDATE CURRENT_TIMESTAMP
);

INSERT INTO BLOG(TEXT)
VALUES("Anyone can build wealth, but your beliefs about money can affect how much wealth you'll build.");

SELECT * FROM BLOG;

UPDATE BLOG
SET TEXT= "DON'T SOTP WHEN YOU TIRED " ; 

SELECT * FROM BLOG;


-- LOGICAL OPERATION

SELECT * FROM L1;

SELECT * FROM L1 WHERE PAYMENT >= 30000 AND PAYMENT <= 100000 ;

SELECT * FROM L1 WHERE PAYMENT BETWEEN  30000 AND 100000 ;

 
SELECT * FROM L1 WHERE DEPERTEMENT='FINANCE' AND PAYMENT >=25000;

SELECT * FROM L1 WHERE DEPERTEMENT='FINANCE' OR PAYMENT < 25000;
-- > BOTH CODE ARE SAME [FIRST 2]
SELECT * FROM L1 WHERE DEPERTEMENT='IT' OR DEPERTEMENT='FINANCE';

SELECT * FROM L1 WHERE DEPERTEMEMT IN('IT', 'FINANCE');

-- ]CASE FUNCTION [

 SELECT CONCAT(FNAME, ' ', LNAME) AS FULLNAME, PAYMENT,
 CASE
 WHEN PAYMENT >= 60000 THEN 'GOOD SALARY'
 ELSE 'NOT GOOD SALARY'
 END AS 'SALARY CATAGEORY'
 FROM L1;
 
 
 
 -- CONSTIRANT 
 
 CREATE TABLE CONTACT(
 NAME VARCHAR(60) NOT NULL,
 MOB_NO VARCHAR(15) UNIQUE
 );
 
INSERT INTO CONTACT(NAME, MOB_NO)
VALUES('MAYANK', 9987464323),('RAM', 9865966477),('KETAN',7876599859);

SELECT * FROM CONTACT;

CREATE TABLE CONTACT1(
 NAME VARCHAR(60) NOT NULL,
 MOB_NO VARCHAR(15) UNIQUE CHECK (LENGTH(MOB_NO) = 10)
 );

INSERT INTO CONTACT1(NAME, MOB_NO)
VALUES('MAYANK.S', 9987464363),('RAMA', 98655577),('KETAN.S',7876599959);

SELECT * FROM CONTACT1;

CREATE TABLE CONTACT2(
 NAME VARCHAR(60) NOT NULL,
 MOB_NO VARCHAR(15) UNIQUE 
 CONSTRAINT MOB_NO_LESS_THAN_10 CHECK (LENGTH(MOB_NO) = 10)
 );

INSERT INTO CONTACT2(NAME, MOB_NO)
VALUES('MAYANK.S', 9987464363),('RAMA', 98655577),('KETAN.S',7876599959);

SELECT * FROM CONTACT2;

-- ALTER TABLE 

-- [HOW TO ADD COLUMN]
ALTER TABLE L1
ADD COLUMN COUNTRY CHAR(15) DEFAULT 'INDIA';

SELECT * FROM L1;

-- [HOW TO REMOVE COLOUMN]
ALTER TABLE L1
DROP COLUMN SALARY;

SELECT * FROM L1;

-- [HOW TO RENAME COLOUMN ]
ALTER TABLE L1
RENAME COLUMN PAYMENT TO SALARY;

SELECT * FROM L1;
-- [HOW TO MODIFY]
ALTER TABLE L1
MODIFY COUNTRY CHAR(20) DEFAULT 'BHARAT';

SELECT * FROM L1;



